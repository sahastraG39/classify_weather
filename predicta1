{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":81884,"databundleVersionId":8892995,"sourceType":"competition"}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-22T04:28:02.726026Z","iopub.execute_input":"2024-06-22T04:28:02.727222Z","iopub.status.idle":"2024-06-22T04:28:03.153550Z","shell.execute_reply.started":"2024-06-22T04:28:02.727172Z","shell.execute_reply":"2024-06-22T04:28:03.152368Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\n","metadata":{"execution":{"iopub.status.busy":"2024-06-22T04:28:03.156011Z","iopub.execute_input":"2024-06-22T04:28:03.156597Z","iopub.status.idle":"2024-06-22T04:28:03.164135Z","shell.execute_reply.started":"2024-06-22T04:28:03.156555Z","shell.execute_reply":"2024-06-22T04:28:03.162842Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data= pd.read_csv(\"/kaggle/input/predicta-1-0-predict-the-unpredictable/historical_weather.csv\")\ndata","metadata":{"execution":{"iopub.status.busy":"2024-06-22T04:28:03.165850Z","iopub.execute_input":"2024-06-22T04:28:03.166294Z","iopub.status.idle":"2024-06-22T04:28:03.476504Z","shell.execute_reply.started":"2024-06-22T04:28:03.166255Z","shell.execute_reply":"2024-06-22T04:28:03.475054Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"submission=pd.read_csv(\"/kaggle/input/predicta-1-0-predict-the-unpredictable/sample_submission.csv\")\nsubmission","metadata":{"execution":{"iopub.status.busy":"2024-06-22T04:28:03.478131Z","iopub.execute_input":"2024-06-22T04:28:03.480448Z","iopub.status.idle":"2024-06-22T04:28:03.501323Z","shell.execute_reply.started":"2024-06-22T04:28:03.480410Z","shell.execute_reply":"2024-06-22T04:28:03.500093Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"submission_key=pd.read_csv(\"/kaggle/input/predicta-1-0-predict-the-unpredictable/submission_key.csv\")\nsubmission_key\n","metadata":{"execution":{"iopub.status.busy":"2024-06-22T04:28:03.504156Z","iopub.execute_input":"2024-06-22T04:28:03.504500Z","iopub.status.idle":"2024-06-22T04:28:03.522991Z","shell.execute_reply.started":"2024-06-22T04:28:03.504471Z","shell.execute_reply":"2024-06-22T04:28:03.521646Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.shape\n","metadata":{"execution":{"iopub.status.busy":"2024-06-22T04:28:03.524561Z","iopub.execute_input":"2024-06-22T04:28:03.524943Z","iopub.status.idle":"2024-06-22T04:28:03.532445Z","shell.execute_reply.started":"2024-06-22T04:28:03.524909Z","shell.execute_reply":"2024-06-22T04:28:03.531002Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Visualization of variables","metadata":{}},{"cell_type":"code","source":"#histogram\nfig = plt.figure(figsize = (15,20))\nax = fig.gca()\ndata.hist(ax = ax)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-22T04:28:03.533921Z","iopub.execute_input":"2024-06-22T04:28:03.534413Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#density plot\nfig = plt.figure(figsize = (15,20))\nax = fig.gca()\ndata.plot(ax = ax, kind='density', subplots=True, layout=(6,4), sharex=False)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-22T04:28:05.109712Z","iopub.execute_input":"2024-06-22T04:28:05.110392Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#box plot\nfig = plt.figure(figsize = (10,20))\nax = fig.gca()\ndata.plot(ax = ax, kind='box', subplots=True, layout=(6,4), sharex=False)\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#checking Null values\nNA_values=data.isnull().sum()\nNA_values","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#checking duplicate values\ndata.duplicated().sum()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.describe()\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# data preprocessiong","metadata":{}},{"cell_type":"code","source":"data.isnull().sum()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def fill_missing_with_city_median(data, group_col, target_cols):\n    for col in target_cols:\n        data[col] = data.groupby(group_col)[col].transform(lambda x: x.fillna(x.median()))\n    return data\n\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"columns_to_fill = ['avg_temp_c', 'min_temp_c', 'max_temp_c', 'precipitation_mm', 'snow_depth_mm', 'avg_wind_dir_deg', 'avg_wind_speed_kmh']\ndata = fill_missing_with_city_median(data,'city_id',columns_to_fill)\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.isnull().sum()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data['snow_depth_mm'].fillna(0, inplace=True)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.isnull().sum()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data['date'] = pd.to_datetime(data['date'])\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data['month'] = data['date'].dt.month\ndata['day_of_year'] = data['date'].dt.dayofyear","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.dtypes\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# feature selection and Engineering","metadata":{}},{"cell_type":"code","source":"#spliting data\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nfeatures = ['city_id', 'month', 'day_of_year', 'min_temp_c', 'max_temp_c', 'precipitation_mm', 'snow_depth_mm', 'avg_wind_dir_deg', 'avg_wind_speed_kmh']\ntarget='avg_temp_c'\n\n# Convert categorical features to dummy variables\nX = pd.get_dummies(data[features], columns=['city_id'])\nY = data[target]\n\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3)\nX_train.shape, X_test.shape, Y_train.shape, Y_test.shape\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Initialize the model\nlinear_model = LinearRegression()\n\n# Train the model\nlinear_model.fit(X_train, Y_train)\n\n# Predict on the testing set\nY_predicted = linear_model.predict(X_test)\n\n# Evaluate the model\nMSE = mean_absolute_error(Y_test, Y_predicted)\nMSE\n\n\n\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Model Training","metadata":{}},{"cell_type":"code","source":"submission = pd.concat(submission_key, data, on=['city_id', 'date'], how='left')\nsubmission['month'] = submission['date'].dt.month\nsubmission['day_of_year'] = submission['date'].dt.dayofyear\n\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\nsubmission_key['date'] = pd.to_datetime(submission_key['date'])\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"submission_id = submission['submission_ID']\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Prepare the submission dataset\n","metadata":{}},{"cell_type":"code","source":"submission = fill_missing_with_city_median(data, 'city_id', columns_to_fill)\n\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"submission.isnull().sum()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_submission = pd.get_dummies(submission[features],columns=['city_id'])\nX_submission = X_submission.reindex(columns=X.columns, fill_value=0)\npredictions = linear_model.predict(X_submission)\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"submission['avg_temp_c'] = predictions\nsubmission = pd.DataFrame({'submission_ID': submission_id[:700], 'avg_temp_c': predictions[:700]})\nsubmission.to_csv('/kaggle/working/your_submission.csv',index=False)\n\nprint(submission_output_df)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}